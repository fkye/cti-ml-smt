def func1_unopt(seeds: Array(int32, 1), d: Array(int32, 1), alpha: float64, rho: float64, iters: int32, adj_vals: Array(float64, 1), adj_cols: Array(int32, 1), adj_idxs: Array(int32, 1), nrows: int32, ncols: int32) -> Array(float64, 2):

    adj = csr_to_spm(adj_vals, adj_cols, adj_idxs, ncols)
    num_seeds = int32(seeds.shape(0))
    out = empty((num_seeds, nrows), float64())
    for i in range(num_seeds):
        seed = seeds[i]

        # Make personalized distribution
        s: Array(float64, 1) = zeros(nrows, float64())
        s[seed] = 1.0

        # Compute degree vectors/matrices
        d_sqrt = d.sqrt()
        dn_sqrt: Array(float64, 1) = div(1.0, d_sqrt)

        D = spm_diags(d)
        Dn_sqrt = spm_diags(dn_sqrt)

        # Normalized adjacency matrix
        Q = spm_add(D, spm_add(D, adj).spm_mul(- (float64(1.0) - alpha) / float64(2.0)))
        Q = spmm(Dn_sqrt, Q).spmm(Dn_sqrt)

        # Initialize
        q: Array(float64, 1) = zeros(nrows, float64())

        rad: Array(float64, 1) = mul(d_sqrt, rho * alpha)
        grad0: Array(float64, 1) = mul(dn_sqrt, -alpha).mul(s)
        grad: Array(float64, 1)  = grad0

        # Run
        for _ in range(iters):
            q: Array(float64, 1) = maximum(sub(q, grad).sub(rad), 0.0)
            grad: Array(float64, 1) = add(grad0, spmv(Q, q))
        
        # out.append(q * d_sqrt)
        p = mul(q, d_sqrt)
        for j in range(nrows):
            out[i,j] = p[j]

    return out.T
